<template>
  <div class="login-container">
    <!-- 登陆表单区域 -->
    <el-form
      ref="loginForm"
      :model="loginForm"
      :rules="loginFormRules"
      class="login-form"
      auto-complete="on"
      label-position="left"
    >
      <!-- 用户名 -->
      <el-form-item prop="userName">
        <!-- icon图标 -->
        <span class="svg-container">
          <svg-icon icon-class="user" />
        </span>
        <!-- 表单 -->
        <el-input
          onkeyup="value=value.replace(/[^\w\.\/]/ig,'')"
          ref="userName"
          v-model="loginForm.userName"
          placeholder="请输入用户名"
          name="userName"
          type="text"
          tabindex="1"
          auto-complete="on"
        />
      </el-form-item>
      <!-- 密码 -->
      <el-form-item prop="password">
        <span class="svg-container">
          <svg-icon icon-class="password" />
        </span>
        <el-input
          :key="passwordType"
          ref="password"
          v-model="loginForm.password"
          :type="passwordType"
          placeholder="请输入密码"
          name="password"
          tabindex="2"
          auto-complete="on"
          @keyup.enter.native="handleLogin"
          onkeyup="value=value.replace(/[^\w\.\/]/ig,'')"
        />
        <!-- 点击显示密码图标 -->
        <span class="show-pwd" @click="showPwd">
          <svg-icon
            :icon-class="passwordType === 'password' ? 'eye' : 'eye-open'"
          />
        </span>
      </el-form-item>

      <el-form-item prop="loginPwd" style="display: none">
        <el-input ref="loginPwd" v-model="loginForm.loginPwd" />
      </el-form-item>
      <!-- 提交 -->
      <el-button
        :disabled="can"
        :loading="loading"
        type="primary"
        style="width: 100%; margin-bottom: 30px; float: left"
        @click.native.prevent="handleLogin"
        >登录</el-button
      >
      <!-- 注册 -->
      <el-button
        :disabled="can"
        :loading="loading"
        type="primary"
        style="width: 100%; margin-bottom: 30px; float: left"
        @click="handleregister"
        >注册</el-button
      >
    </el-form>
  </div>
</template>
<script>
import md5 from "js-md5"
import { login, register } from "../../api/user"
import { MessageBox } from "element-ui"
export default {
  name: "Login",
  data () {
    const validateuserName = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("请输入用户名"))
      } else {
        callback()
      }
    }
    const validatePassword = (rule, value, callback) => {
      if (value.length === 0) {
        callback(new Error("请输入密码"))
      } else {
        callback()
      }
    }

    return {
      can: false,
      // 登陆表单的数据绑定对象
      loginForm: {
        userName: "",
        password: "",
        loginPwd: "",
      },
      // 表单验证规则对象
      loginFormRules: {
        userName: [
          { required: true, trigger: "blur", validator: validateuserName },
          // { min: 3, max: 11, message: '请输入3 到 11 个的字符', trigger: 'blur' }
        ],
        password: [
          { required: true, trigger: "blur", validator: validatePassword },
          // { min: 3, max: 11, message: '请输入 3 到 11个字符的密码', trigger: 'blur' }
        ],
      },
      loading: false,
      passwordType: "password",
      redirect: undefined,
    }
  },
  watch: {
    $route: {
      handler: function (route) {
        this.redirect = route.query && route.query.redirect
      },
      immediate: true,
    },
  },
  methods: {
    showPwd () {
      if (this.passwordType === "password") {
        this.passwordType = ""
      } else {
        this.passwordType = "password"
      }
      this.$nextTick(() => {
        this.$refs.password.focus()
      })
    },
    handleLogin () {
      let that = this
      this.$refs.loginForm.validate((valid) => {
        that.loginForm.loginPwd = md5(this.loginForm.password)
        // alert(that.loginForm.loginPwd);
        login(that.loginForm).then((response) => {
          if (response.data.code == 1000) {
            localStorage.setItem("accessToken", response.data.data.token)
            localStorage.setItem("roleCode", response.data.data.roleCode)
            localStorage.setItem(
              "userLoginInfo",
              response.data.data.userName +
              "(" +
              response.data.data.roleName +
              ")"
            )

            if (response.data.data.roleCode == "SuperAdmin") {
              this.$router.push({ path: "/SuperAdmin" })
              this.loading = false
            } else if (response.data.data.roleCode == "Administrator") {
              this.$router.push({ path: "/Administrator" })
              this.loading = false
            } else if (response.data.data.roleCode == "Engineer") {
              this.$router.push({ path: "/Engineer" })
              this.loading = false
            } else if (response.data.data.roleCode == "QualityControl") {
              this.$router.push({ path: "/QualityControl" })
              this.loading = false
            } else if (response.data.data.roleCode == "GroupLeader") {
              this.$router.push({ path: "/GroupLeader" })
              this.loading = false
            }
            this.$router.go(0)
          } else {
            this.$message.error(response.data.message)
            this.menu = response.data.data
          }
        })
      })
    },
    // 注册 后 需后台管理员指定角色才能生效
    handleregister () {
      let that = this
      this.$refs.loginForm.validate((valid) => {
        that.loginForm.loginPwd = md5(this.loginForm.password)
        register(that.loginForm).then((response) => {
          if (response.data.code == 1000) {
            this.$message.success(response.data.message)
          } else {
            this.menu = response.data.data
            this.$message.error(response.data.message)
          }
        })
      })
    },
  },
};
</script>

<style lang="scss">
$bg: #283443;
$light_gray: #fff;
$cursor: #fff;

@supports (-webkit-mask: none) and (not (cater-color: $cursor)) {
  .login-container .el-input input {
    color: $cursor;
  }
}

/* reset element-ui css */
.login-container {
  .el-input {
    display: inline-block;
    height: 47px;
    width: 85%;

    input {
      background: transparent;
      border: 0px;
      -webkit-appearance: none;
      border-radius: 0px;
      padding: 12px 5px 12px 15px;
      color: $light_gray;
      height: 47px;
      caret-color: $cursor;

      &:-webkit-autofill {
        box-shadow: 0 0 0px 1000px $bg inset !important;
        -webkit-text-fill-color: $cursor !important;
      }
    }
  }

  .el-form-item {
    border: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    color: #454545;
  }
}
</style>

<style lang="scss" scoped>
$bg: #2d3a4b;
$dark_gray: #889aa4;
$light_gray: #eee;

.login-container {
  min-height: 100%;
  width: 100%;
  background-color: $bg;
  overflow: hidden;

  .login-form {
    position: relative;
    width: 520px;
    max-width: 100%;
    padding: 160px 35px 0;
    margin: 0 auto;
    overflow: hidden;
  }

  .tips {
    font-size: 14px;
    color: #fff;
    margin-bottom: 10px;

    span {
      &:first-of-type {
        margin-right: 16px;
      }
    }
  }

  .svg-container {
    padding: 6px 5px 6px 15px;
    color: $dark_gray;
    vertical-align: middle;
    width: 30px;
    display: inline-block;
  }

  .show-pwd {
    position: absolute;
    right: 10px;
    top: 7px;
    font-size: 16px;
    color: $dark_gray;
    cursor: pointer;
    user-select: none;
  }
  .el-button {
    margin-left: 0;
  }
}
</style>
